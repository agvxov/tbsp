(translation_unit
 (comment)
 (preproc_include path: (system_lib_string))
 (preproc_include path: (system_lib_string))
 (preproc_include path: (system_lib_string))
 (ERROR
  (identifier)
  (string_literal (string_content))
  (preproc_call directive: (preproc_directive))
  (declaration
   (storage_class_specifier)
   (type_qualifier)
   type:
   (type_identifier)
   declarator:
   (pointer_declarator
    declarator:
    (function_declarator
     declarator: (identifier) parameters:
     (parameter_list
      (parameter_declaration type: (primitive_type))))))
  (preproc_ifdef name: (identifier) (ERROR))
  (declaration
   (type_qualifier) type: (type_identifier) declarator:
   (init_declarator
    declarator:
    (pointer_declarator
     declarator:
     (function_declarator
      declarator:
      (parenthesized_declarator
       (pointer_declarator declarator: (identifier)))
      parameters:
      (parameter_list
       (parameter_declaration type: (primitive_type)))))
    value: (identifier)))
  (type_definition
   type:
   (struct_specifier
    body:
    (field_declaration_list
     (field_declaration
      (type_qualifier) type: (primitive_type) declarator:
      (pointer_declarator
       (type_qualifier) declarator: (field_identifier)))
     (field_declaration
      (type_qualifier)
      type:
      (primitive_type)
      declarator:
      (field_identifier))))
   declarator: (type_identifier))
  (comment)
  (function_definition
   type: (primitive_type) declarator:
   (function_declarator
    declarator: (identifier) parameters:
    (parameter_list
     (parameter_declaration
      (type_qualifier)
      type:
      (type_identifier)
      declarator:
      (pointer_declarator (type_qualifier) declarator: (identifier)))
     (parameter_declaration
      (type_qualifier) type: (primitive_type) declarator:
      (pointer_declarator
       (type_qualifier) declarator: (identifier)))))
   body:
   (compound_statement
    (declaration
     (type_qualifier) type: (type_identifier) declarator:
     (init_declarator
      declarator:
      (pointer_declarator declarator: (identifier))
      value:
      (identifier)))
    (for_statement
     condition:
     (binary_expression
      left:
      (field_expression
       argument: (identifier) field: (field_identifier))
      right: (null))
     update: (update_expression argument: (identifier)) body:
     (compound_statement
      (if_statement
       condition:
       (condition_clause
        value:
        (unary_expression
         argument:
         (call_expression
          function: (identifier) arguments:
          (argument_list
           (field_expression
            argument: (identifier) field: (field_identifier))
           (identifier)))))
       consequence: (compound_statement (break_statement)))))
    (return_statement
     (field_expression
      argument: (identifier) field: (field_identifier)))))
  (function_definition
   type: (primitive_type) declarator:
   (pointer_declarator
    declarator:
    (function_declarator
     declarator: (identifier) parameters:
     (parameter_list
      (parameter_declaration
       (type_qualifier)
       type:
       (primitive_type)
       declarator:
       (pointer_declarator (type_qualifier) declarator: (identifier)))
      (parameter_declaration
       type: (type_identifier) declarator: (identifier)))))
   body:
   (compound_statement
    (declaration
     type: (primitive_type) declarator:
     (init_declarator
      declarator: (identifier) value:
      (binary_expression
       left:
       (call_expression
        function:
        (identifier)
        arguments:
        (argument_list (identifier)))
       right:
       (call_expression
        function:
        (identifier)
        arguments:
        (argument_list (identifier))))))
    (declaration
     type: (primitive_type) declarator:
     (init_declarator
      declarator: (pointer_declarator declarator: (identifier)) value:
      (cast_expression
       type:
       (type_descriptor
        type:
        (primitive_type)
        declarator:
        (abstract_pointer_declarator))
       value:
       (call_expression
        function: (identifier) arguments:
        (argument_list
         (binary_expression
          left:
          (sizeof_expression
           type: (type_descriptor type: (primitive_type)))
          right:
          (parenthesized_expression
           (binary_expression
            left: (identifier) right: (number_literal)))))))))
    (expression_statement
     (call_expression
      function: (identifier) arguments:
      (argument_list
       (identifier)
       (binary_expression
        left: (identifier) right:
        (call_expression
         function:
         (identifier)
         arguments:
         (argument_list (identifier))))
       (identifier))))
    (expression_statement
     (assignment_expression
      left:
      (subscript_expression
       argument:
       (identifier)
       indices:
       (subscript_argument_list (identifier)))
      right: (char_literal (escape_sequence))))
    (return_statement (identifier))))
  (preproc_def name: (identifier) value: (preproc_arg))
  (preproc_function_def
   name:
   (identifier)
   parameters:
   (preproc_params (identifier))
   value:
   (preproc_arg))
  (preproc_def name: (identifier) value: (preproc_arg))
  (preproc_include path: (system_lib_string))
  (preproc_include path: (system_lib_string))
  (preproc_include path: (system_lib_string))
  (using_declaration (identifier))
  (declaration
   type:
   (template_type
    name: (type_identifier) arguments:
    (template_argument_list
     (type_descriptor type: (type_identifier))
     (type_descriptor
      type:
      (template_type
       name: (type_identifier) arguments:
       (template_argument_list
        (type_descriptor type: (type_identifier)))))))
   declarator: (identifier))
  (declaration
   (type_qualifier) type: (type_identifier) declarator:
   (init_declarator
    declarator: (array_declarator declarator: (identifier)) value:
    (initializer_list
     (compound_literal_expression
      type: (type_descriptor type: (type_identifier)) value:
      (initializer_list
       (initializer_pair
        designator:
        (field_designator (field_identifier))
        value:
        (string_literal (string_content)))
       (initializer_pair
        designator:
        (field_designator (field_identifier))
        value:
        (number_literal))))
     (compound_literal_expression
      type: (type_descriptor type: (type_identifier)) value:
      (initializer_list
       (initializer_pair
        designator:
        (field_designator (field_identifier))
        value:
        (string_literal (string_content)))
       (initializer_pair
        designator:
        (field_designator (field_identifier))
        value:
        (number_literal))))
     (compound_literal_expression
      type: (type_descriptor type: (type_identifier)) value:
      (initializer_list
       (initializer_pair
        designator:
        (field_designator (field_identifier))
        value:
        (null))
       (initializer_pair
        designator:
        (field_designator (field_identifier))
        value:
        (number_literal)))))))
  (declaration
   (type_qualifier) type: (type_identifier) declarator:
   (init_declarator
    declarator: (array_declarator declarator: (identifier)) value:
    (initializer_list
     (compound_literal_expression
      type: (type_descriptor type: (type_identifier)) value:
      (initializer_list
       (initializer_pair
        designator:
        (field_designator (field_identifier))
        value:
        (null))
       (initializer_pair
        designator:
        (field_designator (field_identifier))
        value:
        (number_literal)))))))
  (function_definition
   type: (primitive_type) declarator:
   (function_declarator
    declarator: (identifier) parameters:
    (parameter_list
     (parameter_declaration
      (type_qualifier) type: (primitive_type) declarator:
      (pointer_declarator
       (type_qualifier) declarator: (identifier)))))
   body:
   (compound_statement
    (comment)
    (declaration
     type:
     (type_identifier)
     declarator:
     (pointer_declarator declarator: (identifier)))
    (declaration
     type:
     (type_identifier)
     declarator:
     (pointer_declarator declarator: (identifier)))
    (declaration type: (type_identifier) declarator: (identifier))
    (declaration type: (type_identifier) declarator: (identifier))
    (declaration type: (primitive_type) declarator: (identifier))
    (expression_statement
     (assignment_expression
      left: (identifier) right:
      (call_expression
       function: (identifier) arguments: (argument_list))))
    (expression_statement
     (call_expression
      function: (identifier) arguments:
      (argument_list
       (identifier)
       (call_expression
        function: (identifier) arguments: (argument_list)))))
    (expression_statement
     (assignment_expression
      left: (identifier) right:
      (call_expression
       function: (identifier) arguments:
       (argument_list
        (identifier) (null) (identifier)
        (call_expression
         function:
         (identifier)
         arguments:
         (argument_list (identifier)))))))
    (expression_statement
     (assignment_expression
      left: (identifier) right:
      (call_expression
       function: (identifier) arguments:
       (argument_list
        (call_expression
         function:
         (identifier)
         arguments:
         (argument_list (identifier)))))))
    (expression_statement
     (assignment_expression
      left: (identifier) right:
      (call_expression
       function:
       (identifier)
       arguments:
       (argument_list (identifier)))))
    (declaration
     (type_qualifier) type: (type_identifier) declarator:
     (init_declarator
      declarator:
      (pointer_declarator declarator: (identifier))
      value:
      (identifier)))
    (comment)
    (while_statement
     condition: (condition_clause value: (true)) body:
     (compound_statement
      (expression_statement
       (assignment_expression
        left: (identifier) right:
        (call_expression
         function: (identifier) arguments:
         (argument_list
          (pointer_expression argument: (identifier))))))
      (preproc_if
       condition:
       (binary_expression
        left: (preproc_defined (identifier)) right:
        (binary_expression
         left: (identifier) right: (number_literal)))
       (expression_statement
        (call_expression
         function: (identifier) arguments:
         (argument_list
          (call_expression
           function:
           (identifier)
           arguments:
           (argument_list (identifier)))))))
      (expression_statement
       (assignment_expression
        left: (identifier) right:
        (call_expression
         function: (identifier) arguments:
         (argument_list
          (identifier)
          (call_expression
           function:
           (identifier)
           arguments:
           (argument_list (identifier)))))))
      (switch_statement
       condition: (condition_clause value: (identifier)) body:
       (compound_statement
        (comment)
        (case_statement
         value: (number_literal)
         (compound_statement
          (expression_statement
           (call_expression
            function: (identifier) arguments:
            (argument_list
             (call_expression
              function:
              (identifier)
              arguments:
              (argument_list (identifier)))))))
         (break_statement))
        (case_statement
         value: (number_literal)
         (compound_statement
          (declaration
           type: (primitive_type) declarator:
           (init_declarator
            declarator:
            (pointer_declarator declarator: (identifier))
            value:
            (call_expression
             function: (identifier) arguments:
             (argument_list
              (call_expression
               function: (identifier) arguments:
               (argument_list
                (call_expression
                 function: (identifier) arguments:
                 (argument_list
                  (identifier) (string_literal (string_content))
                  (call_expression
                   function: (identifier) arguments:
                   (argument_list
                    (string_literal (string_content))))))
                (string_literal (string_content))
                (call_expression
                 function: (identifier) arguments:
                 (argument_list
                  (string_literal (string_content))))))))))
          (expression_statement
           (call_expression
            function:
            (field_expression
             argument:
             (subscript_expression
              argument: (identifier) indices:
              (subscript_argument_list
               (string_literal (string_content))))
             field: (field_identifier))
            arguments: (argument_list (identifier))))
          (expression_statement
           (call_expression
            function:
            (identifier)
            arguments:
            (argument_list (identifier)))))
         (break_statement))
        (case_statement
         (compound_statement (expression_statement))
         (break_statement))))
      (if_statement
       condition:
       (condition_clause
        value:
        (binary_expression
         left:
         (call_expression
          function:
          (identifier)
          arguments:
          (argument_list (identifier)))
         right:
         (binary_expression left: (identifier) right: (identifier))))
       consequence:
       (compound_statement
        (expression_statement
         (call_expression
          function: (identifier) arguments:
          (argument_list
           (pointer_expression argument: (identifier)))))
        (continue_statement)))
      (labeled_statement
       label: (statement_identifier)
       (if_statement
        condition:
        (condition_clause
         value:
         (unary_expression
          argument:
          (call_expression
           function: (identifier) arguments:
           (argument_list
            (call_expression
             function:
             (identifier)
             arguments:
             (argument_list (identifier)))))))
        consequence:
        (compound_statement
         (if_statement
          condition:
          (condition_clause
           value:
           (binary_expression left: (identifier) right: (identifier)))
          consequence:
          (compound_statement
           (expression_statement
            (assignment_expression
             left: (identifier) right: (identifier)))
           (continue_statement))
          alternative:
          (else_clause
           (compound_statement
            (expression_statement
             (call_expression
              function: (identifier) arguments:
              (argument_list
               (pointer_expression argument: (identifier)))))
            (expression_statement
             (assignment_expression
              left: (identifier) right: (identifier)))
            (continue_statement)))))))
      (if_statement
       condition:
       (condition_clause
        value:
        (binary_expression left: (identifier) right: (identifier)))
       consequence:
       (compound_statement
        (expression_statement
         (assignment_expression
          left: (identifier) right: (identifier)))
        (continue_statement)))
      (if_statement
       condition:
       (condition_clause
        value:
        (call_expression
         function:
         (identifier)
         arguments:
         (argument_list (pointer_expression argument: (identifier)))))
       consequence:
       (compound_statement
        (expression_statement
         (assignment_expression
          left: (identifier) right: (identifier)))
        (goto_statement label: (statement_identifier))))
      (break_statement)))
    (comment)
    (expression_statement
     (call_expression
      function: (identifier) arguments: (argument_list (identifier))))
    (expression_statement
     (call_expression
      function: (identifier) arguments: (argument_list (identifier))))
    (expression_statement
     (call_expression
      function:
      (identifier)
      arguments:
      (argument_list (pointer_expression argument: (identifier)))))
    (return_statement (number_literal))))
  (comment)
  (function_definition
   type: (sized_type_specifier) declarator:
   (function_declarator
    declarator: (identifier) parameters:
    (parameter_list
     (parameter_declaration
      type: (primitive_type) declarator: (identifier))
     (parameter_declaration
      type: (primitive_type) declarator:
      (pointer_declarator
       declarator: (pointer_declarator declarator: (identifier))))))
   body:
   (compound_statement
    (if_statement
     condition:
     (condition_clause
      value:
      (binary_expression left: (identifier) right: (number_literal)))
     consequence:
     (compound_statement (return_statement (number_literal))))
    (declaration
     type: (type_identifier) declarator:
     (init_declarator
      declarator: (pointer_declarator declarator: (identifier)) value:
      (call_expression
       function: (identifier) arguments:
       (argument_list
        (subscript_expression
         argument:
         (identifier)
         indices:
         (subscript_argument_list (number_literal)))
        (string_literal (string_content))))))
    (expression_statement
     (call_expression
      function:
      (identifier)
      arguments:
      (argument_list (identifier) (number_literal) (identifier))))
    (declaration
     type: (primitive_type) declarator:
     (init_declarator
      declarator: (identifier) value:
      (call_expression
       function:
       (identifier)
       arguments:
       (argument_list (identifier)))))
    (expression_statement
     (call_expression
      function: (identifier) arguments: (argument_list (identifier))))
    (declaration
     type: (primitive_type) declarator:
     (array_declarator
      declarator:
      (identifier)
      size:
      (binary_expression left: (identifier) right: (number_literal))))
    (expression_statement
     (assignment_expression
      left:
      (subscript_expression
       argument:
       (identifier)
       indices:
       (subscript_argument_list (identifier)))
      right: (char_literal (escape_sequence))))
    (expression_statement
     (call_expression
      function: (identifier) arguments:
      (argument_list
       (identifier) (identifier)
       (sizeof_expression
        type: (type_descriptor type: (primitive_type)))
       (identifier))))
    (expression_statement
     (call_expression
      function: (identifier) arguments: (argument_list (identifier))))
    (expression_statement
     (call_expression
      function: (identifier) arguments: (argument_list (identifier))))
    (for_range_loop
     (type_qualifier)
     type:
     (placeholder_type_specifier (auto))
     declarator:
     (reference_declarator (identifier))
     right:
     (identifier)
     body:
     (compound_statement
      (expression_statement
       (call_expression
        function: (identifier) arguments:
        (argument_list
         (call_expression
          function:
          (field_expression
           argument:
           (field_expression
            argument: (identifier) field: (field_identifier))
           field: (field_identifier))
          arguments: (argument_list)))))
      (for_range_loop
       (type_qualifier)
       type:
       (placeholder_type_specifier (auto))
       declarator:
       (reference_declarator (identifier))
       right:
       (field_expression
        argument: (identifier) field: (field_identifier))
       body:
       (compound_statement
        (expression_statement
         (call_expression
          function: (identifier) arguments:
          (argument_list
           (string_literal (string_content) (escape_sequence))
           (call_expression
            function:
            (field_expression
             argument: (identifier) field: (field_identifier))
            arguments: (argument_list)))))))
      (expression_statement
       (call_expression
        function:
        (identifier)
        arguments:
        (argument_list (string_literal))))))
    (return_statement (number_literal))))))
